const fs = require('fs');
const path = require('path');
const sharp = require('sharp');
const glob = require('glob');

// Image size configurations based on component usage
const IMAGE_CONFIGS = {
  // Hero images - full width
  'hero.jpg': {
    sizes: [
      { width: 1920, suffix: 'xl' },  // Desktop
      { width: 1280, suffix: 'lg' },  // Laptop
      { width: 768, suffix: 'md' },   // Tablet
      { width: 640, suffix: 'sm' }    // Mobile
    ],
    quality: 80
  },
  // Profile/Team images - medium sized
  'profile': {
    sizes: [
      { width: 400, suffix: 'lg' },
      { width: 300, suffix: 'md' },
      { width: 200, suffix: 'sm' }
    ],
    quality: 85
  },
  // Feature images - various sizes
  'feature': {
    sizes: [
      { width: 800, suffix: 'lg' },
      { width: 600, suffix: 'md' },
      { width: 400, suffix: 'sm' }
    ],
    quality: 80
  },
  // Logo images - small, high quality
  'logo': {
    sizes: [
      { width: 200, suffix: 'lg' },
      { width: 150, suffix: 'md' },
      { width: 100, suffix: 'sm' }
    ],
    quality: 90
  }
};

// Helper to determine image type from filename
function getImageType(filename) {
  if (filename.includes('hero')) return 'hero.jpg';
  if (filename.includes('profile') || filename.includes('team')) return 'profile';
  if (filename.includes('feature')) return 'feature';
  if (filename.includes('logo')) return 'logo';
  return 'feature'; // Default to feature sizing
}

async function processImage(imagePath) {
  const filename = path.basename(imagePath);
  const directory = path.dirname(imagePath);
  const imageType = getImageType(filename);
  const config = IMAGE_CONFIGS[imageType];
  
  if (!config) {
    console.log(`Skipping ${filename} - no configuration found`);
    return;
  }

  const metadata = await sharp(imagePath).metadata();
  const originalSize = fs.statSync(imagePath).size;
  
  console.log(`\nProcessing ${filename}:`);
  console.log(`Original size: ${(originalSize / 1024).toFixed(2)}KB`);
  console.log(`Original dimensions: ${metadata.width}x${metadata.height}`);
  
  for (const size of config.sizes) {
    const extension = path.extname(filename);
    const basename = path.basename(filename, extension);
    const newFilename = `${basename}-${size.suffix}${extension}`;
    const outputPath = path.join(directory, newFilename);
    
    // Skip if width is larger than original
    if (size.width > metadata.width) {
      console.log(`Skipping ${size.suffix} - original is smaller`);
      continue;
    }
    
    try {
      await sharp(imagePath)
        .resize(size.width, null, {
          withoutEnlargement: true,
          fit: 'inside'
        })
        .jpeg({ quality: config.quality })
        .toFile(outputPath);
      
      const newSize = fs.statSync(outputPath).size;
      console.log(`Created ${size.suffix}: ${size.width}px, ${(newSize / 1024).toFixed(2)}KB`);
    } catch (error) {
      console.error(`Error processing ${filename} at ${size.width}px:`, error);
    }
  }
}

// Generate TypeScript types for the image sizes
function generateImageSizeTypes() {
  const types = Object.entries(IMAGE_CONFIGS).map(([key, config]) => {
    const suffixes = config.sizes.map(s => `'${s.suffix}'`).join(' | ');
    return `  '${key}': ${suffixes};`;
  }).join('\n');

  const typeContent = `// Generated by optimize-image-sizes.js
export type ImageSizes = {
${types}
}

export const imageSizeConfigs = ${JSON.stringify(IMAGE_CONFIGS, null, 2)} as const;
`;

  fs.writeFileSync(
    path.join(process.cwd(), 'src/types/image-sizes.ts'),
    typeContent
  );
}

// Process all images in the public/images directory
async function main() {
  const publicDir = path.join(process.cwd(), 'public');
  const images = glob.sync('images/**/*.{jpg,jpeg,png}', { cwd: publicDir });
  
  console.log(`Found ${images.length} images to process\n`);
  
  for (const image of images) {
    await processImage(path.join(publicDir, image));
  }
  
  // Generate TypeScript types
  generateImageSizeTypes();
  
  console.log('\nImage processing complete!');
  console.log('TypeScript types generated in src/types/image-sizes.ts');
}

main().catch(console.error);
