import { supabase } from '../utils/supabase';

export interface User {
  id: string;
  email: string;
  user_metadata: {
    kindly_id: string; // 5-digit ID
    name: string;
  };
}

export const auth = {
  // Register with email/password
  async register(email: string, password: string, name: string) {
    console.log('Starting registration...');
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email,
      password
    });

    console.log('Auth signup result:', { authData, authError });
    if (authError) throw authError;
    if (!authData.user) throw new Error('No user data after signup');

    // Generate 5-digit user ID
    const kindly_id = Math.floor(10000 + Math.random() * 90000).toString();
    console.log('Generated kindly_id:', kindly_id);

    // Get session to verify we're authenticated
    const { data: { session } } = await supabase.auth.getSession();
    console.log('Current session:', session);

    // Insert into users table with simpler RLS policy
    console.log('Attempting to insert user profile...');
    const { data: insertData, error: profileError } = await supabase
      .from('users')
      .insert({
        id: authData.user.id,
        kindly_id,
        name,
        email: authData.user.email
      })
      .select();

    console.log('Insert result:', { insertData, profileError });
    if (profileError) {
      console.error('Error creating profile:', profileError);
      throw profileError;
    }

    return {
      id: authData.user.id,
      email: authData.user.email!,
      kindly_id,
      name
    };
  },

  // Login with email/password
  async login(email: string, password: string) {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });

    if (error) throw error;
    return data;
  },

  // Login with Google
  async loginWithGoogle() {
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: chrome.runtime.getURL('popup.html'),
      },
    });

    if (error) throw error;
    return data;
  },

  // Login with Apple
  async loginWithApple() {
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: 'apple',
      options: {
        redirectTo: chrome.runtime.getURL('popup.html'),
      },
    });

    if (error) throw error;
    return data;
  },

  // Login with Facebook
  async loginWithFacebook() {
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: 'facebook',
      options: {
        redirectTo: chrome.runtime.getURL('popup.html'),
      },
    });

    if (error) throw error;
    return data;
  },

  // Get current session
  async getSession() {
    const { data: { session }, error } = await supabase.auth.getSession();
    if (error) throw error;
    return session;
  },

  // Get current user
  async getCurrentUser(): Promise<User | null> {
    const session = await this.getSession();
    if (!session) return null;

    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('id', session.user.id)
      .single();

    if (error) throw error;
    return data;
  },

  // Logout
  async logout() {
    const { error } = await supabase.auth.signOut();
    if (error) throw error;
  },
};
