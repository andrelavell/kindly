{"version":3,"file":"background.js","mappings":";;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,yCAAyC,wBAAwB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,yGAAyG;AACzG;AACA;AACA;AACA,iDAAiD,oBAAoB;AACrE;AACA,iBAAiB;AACjB;AACA,2CAA2C,qBAAqB;AAChE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,uCAAuC,sBAAsB;AAC7D;AACA;AACA;AACA;AACA,iCAAiC,mBAAmB;AACpD;AACA;AACA;AACA,gCAAgC,mCAAmC;AACnE,+BAA+B,cAAc;AAC7C,aAAa;AACb,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,eAAe;AAC1D,yBAAyB;AACzB;AACA,iBAAiB;AACjB,aAAa;AACb,yBAAyB;AACzB;AACA,CAAC","sources":["webpack://kindly-extension/./src/background/index.ts"],"sourcesContent":["\"use strict\";\n/// <reference types=\"chrome\"/>\n// Background service worker\nconsole.log('Kindly: Background script loaded');\nconst MERCHANTS_URL = 'https://kindly-merchant-data.s3.us-east-2.amazonaws.com/merchants.json';\nlet cachedMerchants = null;\n// Function to fetch merchants data\nasync function fetchMerchants() {\n    console.log('Kindly Background DEBUG: Starting fetchMerchants');\n    try {\n        if (cachedMerchants) {\n            console.log('Kindly Background DEBUG: Found cached data:', {\n                length: cachedMerchants.length,\n                sample: cachedMerchants[0]\n            });\n            return cachedMerchants;\n        }\n        console.log('Kindly Background DEBUG: No cache, fetching from:', MERCHANTS_URL);\n        const response = await fetch(MERCHANTS_URL);\n        console.log('Kindly Background DEBUG: Fetch response status:', response.status);\n        const data = await response.json();\n        console.log('Kindly Background DEBUG: Parsed JSON data length:', data.length);\n        console.log('Kindly Background DEBUG: First item:', data[0]);\n        // Cache the data\n        cachedMerchants = data;\n        const merchantCount = data[0]?.metadata ? data.length - 1 : data.length;\n        console.log('Kindly Background DEBUG: Cached', merchantCount, 'merchants');\n        console.log('Kindly Background DEBUG: Sample merchants:', data.slice(0, 3));\n        return data;\n    }\n    catch (error) {\n        console.error('Kindly Background DEBUG: Error in fetchMerchants:', error);\n        console.error('Kindly Background DEBUG: Error stack:', error.stack);\n        return null;\n    }\n}\n// Clear any existing state on startup\nchrome.storage.local.clear(() => {\n    console.log('Kindly: Storage cleared on startup');\n});\n// Listen for messages from content script\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    console.log('Kindly Background DEBUG: Message received:', {\n        type: message.type,\n        sender: sender.url\n    });\n    if (message.type === 'FETCH_MERCHANTS') {\n        console.log('Kindly Background DEBUG: Processing FETCH_MERCHANTS request');\n        // Fetch merchants and send response\n        fetchMerchants().then(data => {\n            console.log('Kindly Background DEBUG: Sending response to content script:', {\n                dataLength: data?.length,\n                hasData: !!data,\n                sampleMerchant: data?.[0]\n            });\n            sendResponse(data);\n        }).catch(error => {\n            console.error('Kindly Background DEBUG: Error in message handler:', error);\n            sendResponse(null);\n        });\n        // Return true to indicate we will send a response asynchronously\n        return true;\n    }\n});\n// Listen for tab updates\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n    console.log('Kindly: Tab updated', { tabId, changeInfo, tab });\n    if (changeInfo.status === 'complete' && tab.url) {\n        console.log('Kindly: Page loaded, checking if merchant site');\n        // Check if we should show the popup\n        chrome.storage.local.get(['donationActive', 'lastPopupShown'], (result) => {\n            console.log('Kindly: Current state', result);\n            const now = Date.now();\n            const showAfter = result.lastPopupShown ? result.lastPopupShown + (24 * 60 * 60 * 1000) : 0; // 24 hours\n            if (!result.donationActive && (!result.lastPopupShown || now > showAfter)) {\n                console.log('Kindly: Sending show popup message');\n                // Send message to content script to show popup\n                chrome.tabs.sendMessage(tabId, { type: 'SHOW_POPUP' }).catch(error => {\n                    console.log('Kindly: Error sending message', error);\n                });\n                // Update last shown time\n                chrome.storage.local.set({ lastPopupShown: now });\n            }\n            else {\n                console.log('Kindly: Not showing popup - already active or recently closed');\n            }\n        });\n    }\n});\n// Listen for messages from content script\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    console.log('Kindly: Received message:', message);\n    switch (message.type) {\n        case 'ACTIVATE_DONATION':\n            chrome.storage.local.set({ donationActive: true });\n            console.log('Kindly: Donation activated');\n            break;\n        case 'OPEN_CAUSE_SELECTOR':\n            // Open popup.html in a new tab\n            chrome.tabs.create({ url: 'popup.html' });\n            console.log('Kindly: Opening cause selector');\n            break;\n        case 'GET_ACTIVE_TAB':\n            chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n                sendResponse({ tab: tabs[0] });\n            });\n            return true; // Keep the message channel open for async response\n        case 'OPEN_AFFILIATE_LINK':\n            // Open affiliate link in pinned tab\n            chrome.tabs.create({\n                url: message.url,\n                pinned: true,\n                active: false\n            }).then(tab => {\n                // Listen for tab to finish loading\n                chrome.tabs.onUpdated.addListener(function listener(tabId, info) {\n                    if (tabId === tab.id && info.status === 'complete') {\n                        // Remove the listener\n                        chrome.tabs.onUpdated.removeListener(listener);\n                        // Close the tab after a delay\n                        setTimeout(() => {\n                            chrome.tabs.remove(tab.id);\n                            sendResponse({ success: true });\n                        }, 1000);\n                    }\n                });\n            });\n            return true; // Keep the message channel open for async response\n    }\n});\n"],"names":[],"sourceRoot":""}